plugins {
    id 'java'
    id 'org.springframework.boot' version '2.4.4'
    id 'org.hidetake.ssh' version '2.10.1'
}

apply plugin: 'io.spring.dependency-management'

group 'info.servobot'
version '1.0-SNAPSHOT'

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
    jcenter()
    maven {
        url 'https://oss.jfrog.org/artifactory/libs-release'
    }
}

def deploymentProperties = new Properties()
file('secret/deployment.properties').withInputStream {deploymentProperties.load(it) }

remotes {
    server {
        host = deploymentProperties.getProperty('hostname')
        user = deploymentProperties.getProperty('user')
        identity = file(deploymentProperties.getProperty('keyfile'))
    }
}

configurations {
    compile.exclude module: 'spring-boot-starter-logging'
}

dependencies {
    compile 'com.fasterxml.jackson.core:jackson-annotations:2.12.3'
    compile 'com.fasterxml.jackson.core:jackson-core:2.12.3'
    compile 'com.fasterxml.jackson.core:jackson-databind:2.12.3'
    compile 'com.google.guava:guava:28.1-jre'
    compile 'com.github.twitch4j:twitch4j:1.3.1'
    compile 'mysql:mysql-connector-java:8.0.16'

    compile ('net.dv8tion:JDA:4.2.0_168') {
        exclude module: 'opus-java'
    }

    compile 'org.apache.httpcomponents:httpclient:4.+'
    compile 'org.hibernate:hibernate-core:5.4.2.Final'
    compile 'org.jsoup:jsoup:1.+'
    compile 'org.springframework.boot:spring-boot-devtools'
    compile 'org.springframework.boot:spring-boot-starter-log4j2'
    compile 'org.springframework.boot:spring-boot-starter-security:2.2.4.RELEASE'
    compile 'org.springframework.boot:spring-boot-starter-thymeleaf'
    compile 'org.springframework.boot:spring-boot-starter-validation'
    compile 'org.springframework.boot:spring-boot-starter-web'
    compile 'org.springframework.security.oauth.boot:spring-security-oauth2-autoconfigure:2.2.4.RELEASE'
    compile 'org.springframework.security.oauth:spring-security-oauth2:2.4.0.RELEASE'
    compile 'org.springframework.security:spring-security-oauth2-client'
    compile 'org.springframework.session:spring-session-jdbc'

    compile 'org.springframework.data:spring-data-jpa:2.1.8.RELEASE'

    compileOnly 'org.projectlombok:lombok:1.18.12'
    annotationProcessor 'org.projectlombok:lombok:1.18.12'

    testCompile 'junit:junit'
    testCompile 'org.mockito:mockito-core:2.+'
    testCompile 'org.hamcrest:hamcrest:2.+'

    testCompileOnly 'org.projectlombok:lombok:1.18.12'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.12'
}

bootJar {
    dependsOn check

    archiveBaseName = 'servo-bot'
    mainClassName = 'com.ryan_mtg.servobot.Application'
}

tasks.withType(JavaCompile) {
    options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
}

bootRun {
    main = 'com.ryan_mtg.servobot.Application'
}

ssh.settings {
    knownHosts = allowAnyHosts
}

task configureResources {
    doFirst {
        def secretResourceDir = 'secret/local/resources'
        if (gradle.startParameter.taskNames.contains('bootJar') || gradle.startParameter.taskNames.contains('deploy')) {
            secretResourceDir = 'secret/deploy/resources'
        }
        sourceSets {
            main {
                resources {
                    srcDirs 'src/main/resources', secretResourceDir
                }
            }
        }

    }
}

processResources {
    dependsOn(configureResources)
}

task deploy {
    group = 'application'
    description = 'Builds and uploads deployment jar to EC2 instance.'
    dependsOn(bootJar)

    doLast {
        println '< doing deploy'
        ssh.run {
            session(remotes.server) {
                put from: bootJar.archiveFile.get().asFile, into: 'install'
                def result = execute 'sudo install/deploy.sh'
                println result
            }
        }
        println '> deploy done'
    }
}

task install {
    group = 'application'
    description = 'Installs the necessary files to a new server.'

    doLast {
        ssh.run {
            session(remotes.server) {
                execute 'mkdir -p install'
                put from: file('src/deploy/deploy.sh'), into: 'install/deploy.sh'
                execute 'chmod +x install/deploy.sh'
                put from: file('src/deploy/servobot.service'), into: 'install/servobot.service'
            }
        }
    }
}